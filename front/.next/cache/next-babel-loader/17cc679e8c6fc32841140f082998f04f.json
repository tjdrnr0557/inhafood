{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List, Popover } from \"antd\";\nimport Link from \"next/link\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ADD_COMMENT_REQUEST, LIKE_POST_REQUEST, LOAD_COMMENTS_REQUEST, RETWEET_REQUEST, UNLIKE_POST_REQUEST } from \"../reducers/post\";\nimport PostImages from \"../components/PostImages\";\nimport PostCardContent from \"../components/PostCardContent\";\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from \"../reducers/user\";\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var liked = me && post.Likers && post.Likers.find(function (v) {\n    return v.id === me.id;\n  });\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(function () {\n    setCommentText(\"\");\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  var onToggleLike = useCallback(function () {\n    if (!me) {\n      return alert(\"로그인이 필요합니다!\");\n    }\n\n    if (liked) {\n      // 좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  var onRetweet = useCallback(function () {\n    if (!me) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]);\n  var onFollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: FOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onUnfollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: UNFOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  return __jsx(\"div\", null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      onClick: onRetweet\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: liked ? \"twoTone\" : \"outlined\",\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, null, me && post.UserId === me.id ? __jsx(React.Fragment, null, __jsx(Button, null, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\"\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, null, \"\\uC2E0\\uACE0\"))\n    }, __jsx(Icon, {\n      type: \"ellipsis\"\n    }))],\n    title: post.RetweetId ? \"\".concat(post.User.nickname, \"\\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717\\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4.\") : null,\n    extra: !me || post.User.id === me.id ? null : me.Followings && me.Followings.find(function (v) {\n      return v.id === post.User.id;\n    }) ? __jsx(Button, {\n      onClick: onUnfollow(post.User.id)\n    }, \"\\uC5B8\\uD314\\uB85C\\uC6B0\") : __jsx(Button, {\n      onClick: onFollow(post.User.id)\n    }, \"\\uD314\\uB85C\\uC6B0\")\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: \"/user\",\n        query: {\n          id: post.Retweet.User.id\n        }\n      },\n      as: \"/user/\".concat(post.Retweet.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    }) // a tag x -> Link\n\n  })) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: \"/user\",\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    }) // a tag x -> Link\n\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: \"/user\",\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"/user/\".concat(item.User.id)\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/sunggooklee/Desktop/react-nodebird/inhafood/front/containers/PostCard.js"],"names":["React","useCallback","useEffect","useState","Avatar","Button","Card","Comment","Form","Icon","Input","List","Popover","Link","PropTypes","useDispatch","useSelector","ADD_COMMENT_REQUEST","LIKE_POST_REQUEST","LOAD_COMMENTS_REQUEST","RETWEET_REQUEST","UNLIKE_POST_REQUEST","PostImages","PostCardContent","FOLLOW_USER_REQUEST","UNFOLLOW_USER_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","liked","Likers","find","v","id","onToggleComment","prev","type","data","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","onToggleLike","onRetweet","onFollow","userId","onUnfollow","createdAt","Images","UserId","RetweetId","User","nickname","Followings","Retweet","pathname","query","Comments","length","item","propTypes","shape","object","string","img","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SACEC,MADF,EAEEC,MAFF,EAGEC,IAHF,EAIEC,OAJF,EAKEC,IALF,EAMEC,IANF,EAOEC,KAPF,EAQEC,IARF,EASEC,OATF,QAUO,MAVP;AAWA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SACEC,mBADF,EAEEC,iBAFF,EAGEC,qBAHF,EAIEC,eAJF,EAKEC,mBALF,QAMO,kBANP;AAOA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,SAASC,mBAAT,EAA8BC,qBAA9B,QAA2D,kBAA3D;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBACqBxB,QAAQ,CAAC,KAAD,CAD7B;AAAA,MACtByB,iBADsB;AAAA,MACHC,oBADG;;AAAA,mBAES1B,QAAQ,CAAC,EAAD,CAFjB;AAAA,MAEtB2B,WAFsB;AAAA,MAETC,cAFS;;AAAA,qBAGdf,WAAW,CAAC,UAAAgB,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CAHG;AAAA,MAGrBC,EAHqB,gBAGrBA,EAHqB;;AAAA,sBAIalB,WAAW,CAAC,UAAAgB,KAAK;AAAA,WAAIA,KAAK,CAACL,IAAV;AAAA,GAAN,CAJxB;AAAA,MAIrBQ,YAJqB,iBAIrBA,YAJqB;AAAA,MAIPC,eAJO,iBAIPA,eAJO;;AAK7B,MAAMC,QAAQ,GAAGtB,WAAW,EAA5B;AAEA,MAAMuB,KAAK,GAAGJ,EAAE,IAAIP,IAAI,CAACY,MAAX,IAAqBZ,IAAI,CAACY,MAAL,CAAYC,IAAZ,CAAiB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,EAAF,KAASR,EAAE,CAACQ,EAAhB;AAAA,GAAlB,CAAnC;AAEA,MAAMC,eAAe,GAAG1C,WAAW,CAAC,YAAM;AACxC4B,IAAAA,oBAAoB,CAAC,UAAAe,IAAI;AAAA,aAAI,CAACA,IAAL;AAAA,KAAL,CAApB;;AACA,QAAI,CAAChB,iBAAL,EAAwB;AACtBS,MAAAA,QAAQ,CAAC;AACPQ,QAAAA,IAAI,EAAE1B,qBADC;AAEP2B,QAAAA,IAAI,EAAEnB,IAAI,CAACe;AAFJ,OAAD,CAAR;AAID;AACF,GARkC,EAQhC,EARgC,CAAnC;AAUA,MAAMK,eAAe,GAAG9C,WAAW,CACjC,UAAA+C,CAAC,EAAI;AACHA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAI,CAACf,EAAL,EAAS;AACP,aAAOgB,KAAK,CAAC,aAAD,CAAZ;AACD;;AACD,WAAOb,QAAQ,CAAC;AACdQ,MAAAA,IAAI,EAAE5B,mBADQ;AAEd6B,MAAAA,IAAI,EAAE;AACJK,QAAAA,MAAM,EAAExB,IAAI,CAACe,EADT;AAEJU,QAAAA,OAAO,EAAEtB;AAFL;AAFQ,KAAD,CAAf;AAOD,GAbgC,EAcjC,CAACI,EAAE,IAAIA,EAAE,CAACQ,EAAV,EAAcZ,WAAd,CAdiC,CAAnC;AAiBA5B,EAAAA,SAAS,CAAC,YAAM;AACd6B,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAFQ,EAEN,CAACI,YAAY,KAAK,IAAlB,CAFM,CAAT;AAIA,MAAMkB,mBAAmB,GAAGpD,WAAW,CAAC,UAAA+C,CAAC,EAAI;AAC3CjB,IAAAA,cAAc,CAACiB,CAAC,CAACM,MAAF,CAASC,KAAV,CAAd;AACD,GAFsC,EAEpC,EAFoC,CAAvC;AAIA,MAAMC,YAAY,GAAGvD,WAAW,CAAC,YAAM;AACrC,QAAI,CAACiC,EAAL,EAAS;AACP,aAAOgB,KAAK,CAAC,aAAD,CAAZ;AACD;;AACD,QAAIZ,KAAJ,EAAW;AACT;AACAD,MAAAA,QAAQ,CAAC;AACPQ,QAAAA,IAAI,EAAExB,mBADC;AAEPyB,QAAAA,IAAI,EAAEnB,IAAI,CAACe;AAFJ,OAAD,CAAR;AAID,KAND,MAMO;AACL;AACAL,MAAAA,QAAQ,CAAC;AACPQ,QAAAA,IAAI,EAAE3B,iBADC;AAEP4B,QAAAA,IAAI,EAAEnB,IAAI,CAACe;AAFJ,OAAD,CAAR;AAID;AACF,GAjB+B,EAiB7B,CAACR,EAAE,IAAIA,EAAE,CAACQ,EAAV,EAAcf,IAAI,IAAIA,IAAI,CAACe,EAA3B,EAA+BJ,KAA/B,CAjB6B,CAAhC;AAmBA,MAAMmB,SAAS,GAAGxD,WAAW,CAAC,YAAM;AAClC,QAAI,CAACiC,EAAL,EAAS;AACP,aAAOgB,KAAK,CAAC,aAAD,CAAZ;AACD;;AACD,WAAOb,QAAQ,CAAC;AACdQ,MAAAA,IAAI,EAAEzB,eADQ;AAEd0B,MAAAA,IAAI,EAAEnB,IAAI,CAACe;AAFG,KAAD,CAAf;AAID,GAR4B,EAQ1B,CAACR,EAAE,IAAIA,EAAE,CAACQ,EAAV,EAAcf,IAAI,IAAIA,IAAI,CAACe,EAA3B,CAR0B,CAA7B;AAUA,MAAMgB,QAAQ,GAAGzD,WAAW,CAC1B,UAAA0D,MAAM;AAAA,WAAI,YAAM;AACdtB,MAAAA,QAAQ,CAAC;AACPQ,QAAAA,IAAI,EAAErB,mBADC;AAEPsB,QAAAA,IAAI,EAAEa;AAFC,OAAD,CAAR;AAID,KALK;AAAA,GADoB,EAO1B,EAP0B,CAA5B;AAUA,MAAMC,UAAU,GAAG3D,WAAW,CAC5B,UAAA0D,MAAM;AAAA,WAAI,YAAM;AACdtB,MAAAA,QAAQ,CAAC;AACPQ,QAAAA,IAAI,EAAEpB,qBADC;AAEPqB,QAAAA,IAAI,EAAEa;AAFC,OAAD,CAAR;AAID,KALK;AAAA,GADsB,EAO5B,EAP4B,CAA9B;AAUA,SACE,mBACE,MAAC,IAAD;AACE,IAAA,GAAG,EAAE,CAAChC,IAAI,CAACkC,SADb;AAEE,IAAA,KAAK,EACHlC,IAAI,CAACmC,MAAL,IAAenC,IAAI,CAACmC,MAAL,CAAY,CAAZ,CAAf,IAAiC,MAAC,UAAD;AAAY,MAAA,MAAM,EAAEnC,IAAI,CAACmC;AAAzB,MAHrC;AAKE,IAAA,OAAO,EAAE,CACP,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,GAAG,EAAC,SAAzB;AAAmC,MAAA,OAAO,EAAEL;AAA5C,MADO,EAEP,MAAC,IAAD;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,GAAG,EAAC,OAFN;AAGE,MAAA,KAAK,EAAEnB,KAAK,GAAG,SAAH,GAAe,UAH7B;AAIE,MAAA,YAAY,EAAC,SAJf;AAKE,MAAA,OAAO,EAAEkB;AALX,MAFO,EASP,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,GAAG,EAAC,SAAzB;AAAmC,MAAA,OAAO,EAAEb;AAA5C,MATO,EAUP,MAAC,OAAD;AACE,MAAA,GAAG,EAAC,UADN;AAEE,MAAA,OAAO,EACL,MAAC,MAAD,CAAQ,KAAR,QACGT,EAAE,IAAIP,IAAI,CAACoC,MAAL,KAAgB7B,EAAE,CAACQ,EAAzB,GACC,4BACE,MAAC,MAAD,uBADF,EAEE,MAAC,MAAD;AAAQ,QAAA,IAAI,EAAC;AAAb,wBAFF,CADD,GAMC,MAAC,MAAD,uBAPJ;AAHJ,OAeE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC;AAAX,MAfF,CAVO,CALX;AAiCE,IAAA,KAAK,EACHf,IAAI,CAACqC,SAAL,aAAoBrC,IAAI,CAACsC,IAAL,CAAUC,QAA9B,sEAAuD,IAlC3D;AAoCE,IAAA,KAAK,EACH,CAAChC,EAAD,IAAOP,IAAI,CAACsC,IAAL,CAAUvB,EAAV,KAAiBR,EAAE,CAACQ,EAA3B,GAAgC,IAAhC,GAAuCR,EAAE,CAACiC,UAAH,IACrCjC,EAAE,CAACiC,UAAH,CAAc3B,IAAd,CAAmB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,EAAF,KAASf,IAAI,CAACsC,IAAL,CAAUvB,EAAvB;AAAA,KAApB,CADqC,GAErC,MAAC,MAAD;AAAQ,MAAA,OAAO,EAAEkB,UAAU,CAACjC,IAAI,CAACsC,IAAL,CAAUvB,EAAX;AAA3B,kCAFqC,GAIrC,MAAC,MAAD;AAAQ,MAAA,OAAO,EAAEgB,QAAQ,CAAC/B,IAAI,CAACsC,IAAL,CAAUvB,EAAX;AAAzB;AAzCN,KA6CGf,IAAI,CAACqC,SAAL,IAAkBrC,IAAI,CAACyC,OAAvB,GACC,MAAC,IAAD;AACE,IAAA,KAAK,EACHzC,IAAI,CAACyC,OAAL,CAAaN,MAAb,CAAoB,CAApB,KACE,MAAC,UAAD;AAAY,MAAA,MAAM,EAAEnC,IAAI,CAACyC,OAAL,CAAaN;AAAjC;AAHN,KAOE,MAAC,IAAD,CAAM,IAAN;AACE,IAAA,MAAM,EACJ,MAAC,IAAD;AACE,MAAA,IAAI,EAAE;AACJO,QAAAA,QAAQ,EAAE,OADN;AAEJC,QAAAA,KAAK,EAAE;AAAE5B,UAAAA,EAAE,EAAEf,IAAI,CAACyC,OAAL,CAAaH,IAAb,CAAkBvB;AAAxB;AAFH,OADR;AAKE,MAAA,EAAE,kBAAWf,IAAI,CAACyC,OAAL,CAAaH,IAAb,CAAkBvB,EAA7B;AALJ,OAOE,iBACE,MAAC,MAAD,QAASf,IAAI,CAACyC,OAAL,CAAaH,IAAb,CAAkBC,QAAlB,CAA2B,CAA3B,CAAT,CADF,CAPF,CAFJ;AAcE,IAAA,KAAK,EAAEvC,IAAI,CAACyC,OAAL,CAAaH,IAAb,CAAkBC,QAd3B;AAeE,IAAA,WAAW,EAAE,MAAC,eAAD;AAAiB,MAAA,QAAQ,EAAEvC,IAAI,CAACyC,OAAL,CAAahB;AAAxC,MAff,CAeoE;;AAfpE,IAPF,CADD,GA2BC,MAAC,IAAD,CAAM,IAAN;AACE,IAAA,MAAM,EACJ,MAAC,IAAD;AACE,MAAA,IAAI,EAAE;AAAEiB,QAAAA,QAAQ,EAAE,OAAZ;AAAqBC,QAAAA,KAAK,EAAE;AAAE5B,UAAAA,EAAE,EAAEf,IAAI,CAACsC,IAAL,CAAUvB;AAAhB;AAA5B,OADR;AAEE,MAAA,EAAE,kBAAWf,IAAI,CAACsC,IAAL,CAAUvB,EAArB;AAFJ,OAIE,iBACE,MAAC,MAAD,QAASf,IAAI,CAACsC,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CADF,CAJF,CAFJ;AAWE,IAAA,KAAK,EAAEvC,IAAI,CAACsC,IAAL,CAAUC,QAXnB;AAYE,IAAA,WAAW,EAAE,MAAC,eAAD;AAAiB,MAAA,QAAQ,EAAEvC,IAAI,CAACyB;AAAhC,MAZf,CAY4D;;AAZ5D,IAxEJ,CADF,EAyFGxB,iBAAiB,IAChB,4BACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEmB;AAAhB,KACE,MAAC,IAAD,CAAM,IAAN,QACE,MAAC,KAAD,CAAO,QAAP;AACE,IAAA,IAAI,EAAE,CADR;AAEE,IAAA,KAAK,EAAEjB,WAFT;AAGE,IAAA,QAAQ,EAAEuB;AAHZ,IADF,CADF,EAQE,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAyC,IAAA,OAAO,EAAEjB;AAAlD,oBARF,CADF,EAaE,MAAC,IAAD;AACE,IAAA,MAAM,YAAKT,IAAI,CAAC4C,QAAL,GAAgB5C,IAAI,CAAC4C,QAAL,CAAcC,MAA9B,GAAuC,CAA5C,kBADR;AAEE,IAAA,UAAU,EAAC,YAFb;AAGE,IAAA,UAAU,EAAE7C,IAAI,CAAC4C,QAAL,IAAiB,EAH/B;AAIE,IAAA,UAAU,EAAE,oBAAAE,IAAI;AAAA,aACd,kBACE,MAAC,OAAD;AACE,QAAA,MAAM,EAAEA,IAAI,CAACR,IAAL,CAAUC,QADpB;AAEE,QAAA,MAAM,EACJ,MAAC,IAAD;AACE,UAAA,IAAI,EAAE;AAAEG,YAAAA,QAAQ,EAAE,OAAZ;AAAqBC,YAAAA,KAAK,EAAE;AAAE5B,cAAAA,EAAE,EAAE+B,IAAI,CAACR,IAAL,CAAUvB;AAAhB;AAA5B,WADR;AAEE,UAAA,EAAE,kBAAW+B,IAAI,CAACR,IAAL,CAAUvB,EAArB;AAFJ,WAIE,iBACE,MAAC,MAAD,QAAS+B,IAAI,CAACR,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CADF,CAJF,CAHJ;AAYE,QAAA,OAAO,EAAEO,IAAI,CAACrB;AAZhB,QADF,CADc;AAAA;AAJlB,IAbF,CA1FJ,CADF;AAmID,CAhOD;;AAkOA1B,QAAQ,CAACgD,SAAT,GAAqB;AACnB/C,EAAAA,IAAI,EAAEb,SAAS,CAAC6D,KAAV,CAAgB;AACpBV,IAAAA,IAAI,EAAEnD,SAAS,CAAC8D,MADI;AAEpBxB,IAAAA,OAAO,EAAEtC,SAAS,CAAC+D,MAFC;AAGpBC,IAAAA,GAAG,EAAEhE,SAAS,CAAC+D,MAHK;AAIpBhB,IAAAA,SAAS,EAAE/C,SAAS,CAAC8D;AAJD,GAAhB,EAKHG;AANgB,CAArB;AASA,eAAerD,QAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport {\n  Avatar,\n  Button,\n  Card,\n  Comment,\n  Form,\n  Icon,\n  Input,\n  List,\n  Popover\n} from \"antd\";\nimport Link from \"next/link\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  ADD_COMMENT_REQUEST,\n  LIKE_POST_REQUEST,\n  LOAD_COMMENTS_REQUEST,\n  RETWEET_REQUEST,\n  UNLIKE_POST_REQUEST\n} from \"../reducers/post\";\nimport PostImages from \"../components/PostImages\";\nimport PostCardContent from \"../components/PostCardContent\";\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from \"../reducers/user\";\n\nconst PostCard = ({ post }) => {\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\n  const [commentText, setCommentText] = useState(\"\");\n  const { me } = useSelector(state => state.user);\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n\n  const onSubmitComment = useCallback(\n    e => {\n      e.preventDefault();\n      if (!me) {\n        return alert(\"로그인이 필요합니다.\");\n      }\n      return dispatch({\n        type: ADD_COMMENT_REQUEST,\n        data: {\n          postId: post.id,\n          content: commentText\n        }\n      });\n    },\n    [me && me.id, commentText]\n  );\n\n  useEffect(() => {\n    setCommentText(\"\");\n  }, [commentAdded === true]);\n\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n\n  const onToggleLike = useCallback(() => {\n    if (!me) {\n      return alert(\"로그인이 필요합니다!\");\n    }\n    if (liked) {\n      // 좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n\n  const onRetweet = useCallback(() => {\n    if (!me) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]);\n\n  const onFollow = useCallback(\n    userId => () => {\n      dispatch({\n        type: FOLLOW_USER_REQUEST,\n        data: userId\n      });\n    },\n    []\n  );\n\n  const onUnfollow = useCallback(\n    userId => () => {\n      dispatch({\n        type: UNFOLLOW_USER_REQUEST,\n        data: userId\n      });\n    },\n    []\n  );\n\n  return (\n    <div>\n      <Card\n        key={+post.createdAt}\n        cover={\n          post.Images && post.Images[0] && <PostImages images={post.Images} />\n        }\n        actions={[\n          <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet} />,\n          <Icon\n            type=\"heart\"\n            key=\"heart\"\n            theme={liked ? \"twoTone\" : \"outlined\"}\n            twoToneColor=\"#eb2f96\"\n            onClick={onToggleLike}\n          />,\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\n          <Popover\n            key=\"ellipsis\"\n            content={\n              <Button.Group>\n                {me && post.UserId === me.id ? (\n                  <>\n                    <Button>수정</Button>\n                    <Button type=\"danger\">삭제</Button>\n                  </>\n                ) : (\n                  <Button>신고</Button>\n                )}\n              </Button.Group>\n            }\n          >\n            <Icon type=\"ellipsis\" />\n          </Popover>\n        ]}\n        title={\n          post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null\n        }\n        extra={\n          !me || post.User.id === me.id ? null : me.Followings &&\n            me.Followings.find(v => v.id === post.User.id) ? (\n            <Button onClick={onUnfollow(post.User.id)}>언팔로우</Button>\n          ) : (\n            <Button onClick={onFollow(post.User.id)}>팔로우</Button>\n          )\n        }\n      >\n        {post.RetweetId && post.Retweet ? (\n          <Card\n            cover={\n              post.Retweet.Images[0] && (\n                <PostImages images={post.Retweet.Images} />\n              )\n            }\n          >\n            <Card.Meta\n              avatar={\n                <Link\n                  href={{\n                    pathname: \"/user\",\n                    query: { id: post.Retweet.User.id }\n                  }}\n                  as={`/user/${post.Retweet.User.id}`}\n                >\n                  <a>\n                    <Avatar>{post.Retweet.User.nickname[0]}</Avatar>\n                  </a>\n                </Link>\n              }\n              title={post.Retweet.User.nickname}\n              description={<PostCardContent postData={post.Retweet.content} />} // a tag x -> Link\n            />\n          </Card>\n        ) : (\n          <Card.Meta\n            avatar={\n              <Link\n                href={{ pathname: \"/user\", query: { id: post.User.id } }}\n                as={`/user/${post.User.id}`}\n              >\n                <a>\n                  <Avatar>{post.User.nickname[0]}</Avatar>\n                </a>\n              </Link>\n            }\n            title={post.User.nickname}\n            description={<PostCardContent postData={post.content} />} // a tag x -> Link\n          />\n        )}\n      </Card>\n      {commentFormOpened && (\n        <>\n          <Form onSubmit={onSubmitComment}>\n            <Form.Item>\n              <Input.TextArea\n                rows={4}\n                value={commentText}\n                onChange={onChangeCommentText}\n              />\n            </Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>\n              삐약\n            </Button>\n          </Form>\n          <List\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\n            itemLayout=\"horizontal\"\n            dataSource={post.Comments || []}\n            renderItem={item => (\n              <li>\n                <Comment\n                  author={item.User.nickname}\n                  avatar={\n                    <Link\n                      href={{ pathname: \"/user\", query: { id: item.User.id } }}\n                      as={`/user/${item.User.id}`}\n                    >\n                      <a>\n                        <Avatar>{item.User.nickname[0]}</Avatar>\n                      </a>\n                    </Link>\n                  }\n                  content={item.content}\n                />\n              </li>\n            )}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  }).isRequired\n};\n\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}