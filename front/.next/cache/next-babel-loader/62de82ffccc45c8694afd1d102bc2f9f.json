{"ast":null,"code":"import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { EDIT_NICKNAME_FAILURE, EDIT_NICKNAME_REQUEST, EDIT_NICKNAME_SUCCESS, FOLLOW_USER_FAILURE, FOLLOW_USER_REQUEST, FOLLOW_USER_SUCCESS, LOAD_FOLLOWERS_FAILURE, LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWERS_SUCCESS, LOAD_FOLLOWINGS_FAILURE, LOAD_FOLLOWINGS_REQUEST, LOAD_FOLLOWINGS_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, REMOVE_FOLLOWER_FAILURE, REMOVE_FOLLOWER_REQUEST, REMOVE_FOLLOWER_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_USER_FAILURE, UNFOLLOW_USER_REQUEST, UNFOLLOW_USER_SUCCESS } from \"../reducers/user\";\n\nfunction logInAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/user/login\", loginData, {\n    withCredentials: true\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/user/\", signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    // yield call(signUpAPI);\n    yield call(signUpAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/user/logout\", {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut() {\n  try {\n    // yield call(logOutAPI);\n    yield call(logOutAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(userId ? `/user/${userId}` : \"/user/\", {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser(action) {\n  try {\n    // yield call(loadUserAPI);\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data,\n      me: !action.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction followAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(`/user/${userId}/follow`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* follow(action) {\n  try {\n    // yield call(followAPI);\n    const result = yield call(followAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: FOLLOW_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: FOLLOW_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeEvery(FOLLOW_USER_REQUEST, follow);\n}\n\nfunction unfollowAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.delete(`/user/${userId}/follow`, {\n    withCredentials: true\n  });\n}\n\nfunction* unfollow(action) {\n  try {\n    // yield call(unfollowAPI);\n    const result = yield call(unfollowAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: UNFOLLOW_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: UNFOLLOW_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnfollow() {\n  yield takeEvery(UNFOLLOW_USER_REQUEST, unfollow);\n}\n\nfunction loadFollowersAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(`/user/${userId}/followers`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadFollowers(action) {\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(loadFollowersAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_FOLLOWERS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWERS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadFollowers() {\n  yield takeEvery(LOAD_FOLLOWERS_REQUEST, loadFollowers);\n}\n\nfunction loadFollowingsAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(`/user/${userId}/followings`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadFollowings(action) {\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(loadFollowingsAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_FOLLOWINGS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWINGS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadFollowings() {\n  yield takeEvery(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\n}\n\nfunction removeFollowerAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.delete(`/user/${userId}/follower`, {\n    withCredentials: true\n  });\n}\n\nfunction* removeFollower(action) {\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(removeFollowerAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: REMOVE_FOLLOWER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: REMOVE_FOLLOWER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchRemoveFollower() {\n  yield takeEvery(REMOVE_FOLLOWER_REQUEST, removeFollower);\n}\n\nfunction editNicknameAPI(nickname) {\n  // 서버에 요청을 보내는 부분\n  return axios.patch(\"/user/nickname\", {\n    nickname\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* editNickname(action) {\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(editNicknameAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: EDIT_NICKNAME_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: EDIT_NICKNAME_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchEditNickname() {\n  yield takeEvery(EDIT_NICKNAME_REQUEST, editNickname);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp), fork(watchFollow), fork(watchUnfollow), fork(watchLoadFollowers), fork(watchLoadFollowings), fork(watchRemoveFollower), fork(watchEditNickname)]);\n}","map":{"version":3,"sources":["/Users/sunggooklee/Desktop/react-nodebird/inhafood/front/sagas/user.js"],"names":["all","call","fork","put","takeEvery","axios","EDIT_NICKNAME_FAILURE","EDIT_NICKNAME_REQUEST","EDIT_NICKNAME_SUCCESS","FOLLOW_USER_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","LOAD_FOLLOWERS_FAILURE","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWERS_SUCCESS","LOAD_FOLLOWINGS_FAILURE","LOAD_FOLLOWINGS_REQUEST","LOAD_FOLLOWINGS_SUCCESS","LOAD_USER_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","REMOVE_FOLLOWER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","UNFOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","logInAPI","loginData","post","withCredentials","logIn","action","result","data","type","e","console","error","watchLogIn","signUpAPI","signUpData","signUp","watchSignUp","logOutAPI","logOut","watchLogOut","loadUserAPI","userId","get","loadUser","me","watchLoadUser","followAPI","follow","watchFollow","unfollowAPI","delete","unfollow","watchUnfollow","loadFollowersAPI","loadFollowers","watchLoadFollowers","loadFollowingsAPI","loadFollowings","watchLoadFollowings","removeFollowerAPI","removeFollower","watchRemoveFollower","editNicknameAPI","nickname","patch","editNickname","watchEditNickname","userSaga"],"mappings":"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","sourcesContent":["import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  EDIT_NICKNAME_FAILURE,\n  EDIT_NICKNAME_REQUEST,\n  EDIT_NICKNAME_SUCCESS,\n  FOLLOW_USER_FAILURE,\n  FOLLOW_USER_REQUEST,\n  FOLLOW_USER_SUCCESS,\n  LOAD_FOLLOWERS_FAILURE,\n  LOAD_FOLLOWERS_REQUEST,\n  LOAD_FOLLOWERS_SUCCESS,\n  LOAD_FOLLOWINGS_FAILURE,\n  LOAD_FOLLOWINGS_REQUEST,\n  LOAD_FOLLOWINGS_SUCCESS,\n  LOAD_USER_FAILURE,\n  LOAD_USER_REQUEST,\n  LOAD_USER_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_OUT_FAILURE,\n  LOG_OUT_REQUEST,\n  LOG_OUT_SUCCESS,\n  REMOVE_FOLLOWER_FAILURE,\n  REMOVE_FOLLOWER_REQUEST,\n  REMOVE_FOLLOWER_SUCCESS,\n  SIGN_UP_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n  UNFOLLOW_USER_FAILURE,\n  UNFOLLOW_USER_REQUEST,\n  UNFOLLOW_USER_SUCCESS\n} from \"../reducers/user\";\n\nfunction logInAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/user/login\", loginData, {\n    withCredentials: true\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/user/\", signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    // yield call(signUpAPI);\n    yield call(signUpAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\n    \"/user/logout\",\n    {},\n    {\n      withCredentials: true\n    }\n  );\n}\n\nfunction* logOut() {\n  try {\n    // yield call(logOutAPI);\n    yield call(logOutAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(userId ? `/user/${userId}` : \"/user/\", {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser(action) {\n  try {\n    // yield call(loadUserAPI);\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data,\n      me: !action.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction followAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\n    `/user/${userId}/follow`,\n    {},\n    {\n      withCredentials: true\n    }\n  );\n}\n\nfunction* follow(action) {\n  try {\n    // yield call(followAPI);\n    const result = yield call(followAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: FOLLOW_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: FOLLOW_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeEvery(FOLLOW_USER_REQUEST, follow);\n}\n\nfunction unfollowAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.delete(`/user/${userId}/follow`, {\n    withCredentials: true\n  });\n}\n\nfunction* unfollow(action) {\n  try {\n    // yield call(unfollowAPI);\n    const result = yield call(unfollowAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: UNFOLLOW_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: UNFOLLOW_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnfollow() {\n  yield takeEvery(UNFOLLOW_USER_REQUEST, unfollow);\n}\n\nfunction loadFollowersAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(`/user/${userId}/followers`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadFollowers(action) {\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(loadFollowersAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_FOLLOWERS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWERS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadFollowers() {\n  yield takeEvery(LOAD_FOLLOWERS_REQUEST, loadFollowers);\n}\n\nfunction loadFollowingsAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(`/user/${userId}/followings`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadFollowings(action) {\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(loadFollowingsAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_FOLLOWINGS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWINGS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadFollowings() {\n  yield takeEvery(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\n}\n\nfunction removeFollowerAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.delete(`/user/${userId}/follower`, {\n    withCredentials: true\n  });\n}\n\nfunction* removeFollower(action) {\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(removeFollowerAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: REMOVE_FOLLOWER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: REMOVE_FOLLOWER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchRemoveFollower() {\n  yield takeEvery(REMOVE_FOLLOWER_REQUEST, removeFollower);\n}\n\nfunction editNicknameAPI(nickname) {\n  // 서버에 요청을 보내는 부분\n  return axios.patch(\n    \"/user/nickname\",\n    { nickname },\n    {\n      withCredentials: true\n    }\n  );\n}\n\nfunction* editNickname(action) {\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(editNicknameAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: EDIT_NICKNAME_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: EDIT_NICKNAME_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchEditNickname() {\n  yield takeEvery(EDIT_NICKNAME_REQUEST, editNickname);\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogIn),\n    fork(watchLogOut),\n    fork(watchLoadUser),\n    fork(watchSignUp),\n    fork(watchFollow),\n    fork(watchUnfollow),\n    fork(watchLoadFollowers),\n    fork(watchLoadFollowings),\n    fork(watchRemoveFollower),\n    fork(watchEditNickname)\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}