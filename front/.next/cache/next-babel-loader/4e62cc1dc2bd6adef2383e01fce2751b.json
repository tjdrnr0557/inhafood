{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useCallback, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport PostForm from \"../contianers/PostForm\";\nimport PostCard from \"../contianers/PostCard\";\nimport { LOAD_MAIN_POSTS_REQUEST } from \"../reducers/post\";\n\nconst Home = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const countRef = useRef([]);\n  const onScroll = useCallback(() => {\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n      if (hasMorePost) {\n        const lastId = mainPosts[mainPosts.length - 1].id;\n\n        if (!countRef.current.includes(lastId)) {\n          dispatch({\n            type: LOAD_MAIN_POSTS_REQUEST,\n            lastId\n          });\n          countRef.current.push(lastId);\n        }\n      }\n    }\n  }, [hasMorePost, mainPosts.length]);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", onScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [mainPosts.length]);\n  return __jsx(\"div\", null, me && __jsx(PostForm, null), mainPosts.map(c => {\n    return __jsx(PostCard, {\n      key: c.id,\n      post: c\n    });\n  }));\n};\n\nHome.getInitialProps = async context => {\n  console.log(Object.keys(context));\n  context.store.dispatch({\n    type: LOAD_MAIN_POSTS_REQUEST\n  });\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/sunggooklee/Desktop/react-nodebird/inhafood/front/pages/index.js"],"names":["React","useEffect","useCallback","useRef","useSelector","useDispatch","PostForm","PostCard","LOAD_MAIN_POSTS_REQUEST","Home","me","state","user","mainPosts","hasMorePost","post","dispatch","countRef","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","current","includes","type","push","addEventListener","removeEventListener","map","c","getInitialProps","context","console","log","Object","keys","store"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,EAAwCC,MAAxC,QAAsD,OAAtD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,uBAAT,QAAwC,kBAAxC;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM;AAAEC,IAAAA;AAAF,MAASN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAA1B;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA6BV,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACI,IAAhB,CAA9C;AACA,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAMY,QAAQ,GAAGd,MAAM,CAAC,EAAD,CAAvB;AAEA,QAAMe,QAAQ,GAAGhB,WAAW,CAAC,MAAM;AACjC,QACEiB,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GACAF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAF1C,EAGE;AACA,UAAIV,WAAJ,EAAiB;AACf,cAAMW,MAAM,GAAGZ,SAAS,CAACA,SAAS,CAACa,MAAV,GAAmB,CAApB,CAAT,CAAgCC,EAA/C;;AACA,YAAI,CAACV,QAAQ,CAACW,OAAT,CAAiBC,QAAjB,CAA0BJ,MAA1B,CAAL,EAAwC;AACtCT,UAAAA,QAAQ,CAAC;AACPc,YAAAA,IAAI,EAAEtB,uBADC;AAEPiB,YAAAA;AAFO,WAAD,CAAR;AAIAR,UAAAA,QAAQ,CAACW,OAAT,CAAiBG,IAAjB,CAAsBN,MAAtB;AACD;AACF;AACF;AACF,GAhB2B,EAgBzB,CAACX,WAAD,EAAcD,SAAS,CAACa,MAAxB,CAhByB,CAA5B;AAkBAzB,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,MAAM,CAACa,gBAAP,CAAwB,QAAxB,EAAkCd,QAAlC;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACc,mBAAP,CAA2B,QAA3B,EAAqCf,QAArC;AACD,KAFD;AAGD,GALQ,EAKN,CAACL,SAAS,CAACa,MAAX,CALM,CAAT;AAOA,SACE,mBACGhB,EAAE,IAAI,MAAC,QAAD,OADT,EAEGG,SAAS,CAACqB,GAAV,CAAcC,CAAC,IAAI;AAClB,WAAO,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAC,CAACR,EAAjB;AAAqB,MAAA,IAAI,EAAEQ;AAA3B,MAAP;AACD,GAFA,CAFH,CADF;AAQD,CAvCD;;AAyCA1B,IAAI,CAAC2B,eAAL,GAAuB,MAAMC,OAAN,IAAiB;AACtCC,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,IAAP,CAAYJ,OAAZ,CAAZ;AACAA,EAAAA,OAAO,CAACK,KAAR,CAAc1B,QAAd,CAAuB;AACrBc,IAAAA,IAAI,EAAEtB;AADe,GAAvB;AAGD,CALD;;AAOA,eAAeC,IAAf","sourcesContent":["import React, { useEffect, useCallback, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport PostForm from \"../contianers/PostForm\";\nimport PostCard from \"../contianers/PostCard\";\nimport { LOAD_MAIN_POSTS_REQUEST } from \"../reducers/post\";\n\nconst Home = () => {\n  const { me } = useSelector(state => state.user);\n  const { mainPosts, hasMorePost } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const countRef = useRef([]);\n\n  const onScroll = useCallback(() => {\n    if (\n      window.scrollY + document.documentElement.clientHeight >\n      document.documentElement.scrollHeight - 300\n    ) {\n      if (hasMorePost) {\n        const lastId = mainPosts[mainPosts.length - 1].id;\n        if (!countRef.current.includes(lastId)) {\n          dispatch({\n            type: LOAD_MAIN_POSTS_REQUEST,\n            lastId\n          });\n          countRef.current.push(lastId);\n        }\n      }\n    }\n  }, [hasMorePost, mainPosts.length]);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", onScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [mainPosts.length]);\n\n  return (\n    <div>\n      {me && <PostForm />}\n      {mainPosts.map(c => {\n        return <PostCard key={c.id} post={c} />;\n      })}\n    </div>\n  );\n};\n\nHome.getInitialProps = async context => {\n  console.log(Object.keys(context));\n  context.store.dispatch({\n    type: LOAD_MAIN_POSTS_REQUEST\n  });\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}