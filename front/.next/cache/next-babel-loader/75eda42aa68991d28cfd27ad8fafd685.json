{"ast":null,"code":"import { all, delay, fork, put, takeEvery } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from \"../reducers/user\";\n\nfunction loginAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/login\");\n}\n\nfunction* login() {\n  try {\n    // yield call(loginAPI);\n    yield delay(2000);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction signUpAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/login\");\n}\n\nfunction* signUp() {\n  try {\n    // yield call(signUpAPI);\n    yield delay(2000);\n    throw new Error(\"에러에러에러\");\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/sunggooklee/Desktop/react-nodebird/front/sagas/user.js"],"names":["all","delay","fork","put","takeEvery","axios","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","loginAPI","post","login","type","e","console","error","watchLogin","signUpAPI","signUp","Error","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,SAAhC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,QAOO,kBAPP;;AASA,SAASC,QAAT,GAAoB;AAClB;AACA,SAAOP,KAAK,CAACQ,IAAN,CAAW,QAAX,CAAP;AACD;;AAED,UAAUC,KAAV,GAAkB;AAChB,MAAI;AACF;AACA,UAAMb,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACR;AACAY,MAAAA,IAAI,EAAEP;AAFE,KAAD,CAAT;AAID,GAPD,CAOE,OAAOQ,CAAP,EAAU;AACV;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMb,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAET;AADE,KAAD,CAAT;AAGD;AACF;;AAED,UAAUa,UAAV,GAAuB;AACrB,QAAMf,SAAS,CAACG,cAAD,EAAiBO,KAAjB,CAAf;AACD;;AAED,SAASM,SAAT,GAAqB;AACnB;AACA,SAAOf,KAAK,CAACQ,IAAN,CAAW,QAAX,CAAP;AACD;;AAED,UAAUQ,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMpB,KAAK,CAAC,IAAD,CAAX;AACA,UAAM,IAAIqB,KAAJ,CAAU,QAAV,CAAN;AACA,UAAMnB,GAAG,CAAC;AACR;AACAY,MAAAA,IAAI,EAAEJ;AAFE,KAAD,CAAT;AAID,GARD,CAQE,OAAOK,CAAP,EAAU;AACV;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMb,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEN,eADE;AAERS,MAAAA,KAAK,EAAEF;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUO,WAAV,GAAwB;AACtB,QAAMnB,SAAS,CAACM,eAAD,EAAkBW,MAAlB,CAAf;AACD;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAMxB,GAAG,CAAC,CAACE,IAAI,CAACiB,UAAD,CAAL,EAAmBjB,IAAI,CAACqB,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import { all, delay, fork, put, takeEvery } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  LOG_IN_FAILURE,\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  SIGN_UP_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS\n} from \"../reducers/user\";\n\nfunction loginAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/login\");\n}\n\nfunction* login() {\n  try {\n    // yield call(loginAPI);\n    yield delay(2000);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction signUpAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/login\");\n}\n\nfunction* signUp() {\n  try {\n    // yield call(signUpAPI);\n    yield delay(2000);\n    throw new Error(\"에러에러에러\");\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignUp)]);\n}\n"]},"metadata":{},"sourceType":"module"}