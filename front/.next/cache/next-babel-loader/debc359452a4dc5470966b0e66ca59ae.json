{"ast":null,"code":"var _jsxFileName = \"/Users/sunggooklee/Desktop/react-nodebird/front/components/PostForm.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport { Form, Input, Button } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ADD_POST_REQUEST } from \"../reducers/post\";\n\nvar PostForm = function PostForm() {\n  var dispatch = useDispatch();\n\n  var _useState = useState(\"\"),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      isAddingPost = _useSelector.isAddingPost,\n      postAdded = _useSelector.postAdded;\n\n  useEffect(function () {\n    if (postAdded) {\n      setText(\"\");\n    }\n  }, [postAdded]);\n  var onSubmitForm = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!text || !text.trim()) {\n      return alert(\"게시글을 작성하세요.\");\n    }\n\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: {\n        content: text.trim()\n      }\n    });\n  }, [text]);\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, []);\n  return __jsx(Form, {\n    style: {\n      margin: \"10px 0 20px\"\n    },\n    encType: \"multipart/form-data\",\n    onSubmit: onSubmitForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, __jsx(Input.TextArea, {\n    maxLength: 140,\n    placeholder: \"\\uB0B4\\uC6A9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n    value: text,\n    onChange: onChangeText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), __jsx(Button, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      \"float\": \"right\"\n    },\n    htmlType: \"submit\",\n    loading: isAddingPost,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"\\uB4F1\\uB85D\")), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, imagePaths.map(function (v) {\n    return __jsx(\"div\", {\n      key: v,\n      style: {\n        display: \"inline-block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, __jsx(\"img\", {\n      src: \"http://localhost:3065/\".concat(v),\n      style: {\n        width: \"200px\"\n      },\n      alt: v,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, __jsx(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"\\uC81C\\uAC70\")));\n  })));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["/Users/sunggooklee/Desktop/react-nodebird/front/components/PostForm.js"],"names":["React","useCallback","useState","useEffect","Form","Input","Button","useSelector","useDispatch","ADD_POST_REQUEST","PostForm","dispatch","text","setText","state","post","imagePaths","isAddingPost","postAdded","onSubmitForm","e","preventDefault","trim","alert","type","data","content","onChangeText","target","value","margin","map","v","display","width"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,QAAoC,MAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,gBAAT,QAAiC,kBAAjC;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,MAAMC,QAAQ,GAAGH,WAAW,EAA5B;;AADqB,kBAEGN,QAAQ,CAAC,EAAD,CAFX;AAAA,MAEdU,IAFc;AAAA,MAERC,OAFQ;;AAAA,qBAG2BN,WAAW,CACzD,UAAAO,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GADoD,CAHtC;AAAA,MAGbC,UAHa,gBAGbA,UAHa;AAAA,MAGDC,YAHC,gBAGDA,YAHC;AAAA,MAGaC,SAHb,gBAGaA,SAHb;;AAOrBf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIe,SAAJ,EAAe;AACbL,MAAAA,OAAO,CAAC,EAAD,CAAP;AACD;AACF,GAJQ,EAIN,CAACK,SAAD,CAJM,CAAT;AAMA,MAAMC,YAAY,GAAGlB,WAAW,CAC9B,UAAAmB,CAAC,EAAI;AACHA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAI,CAACT,IAAD,IAAS,CAACA,IAAI,CAACU,IAAL,EAAd,EAA2B;AACzB,aAAOC,KAAK,CAAC,aAAD,CAAZ;AACD;;AACDZ,IAAAA,QAAQ,CAAC;AACPa,MAAAA,IAAI,EAAEf,gBADC;AAEPgB,MAAAA,IAAI,EAAE;AACJC,QAAAA,OAAO,EAAEd,IAAI,CAACU,IAAL;AADL;AAFC,KAAD,CAAR;AAMD,GAZ6B,EAa9B,CAACV,IAAD,CAb8B,CAAhC;AAgBA,MAAMe,YAAY,GAAG1B,WAAW,CAAC,UAAAmB,CAAC,EAAI;AACpCP,IAAAA,OAAO,CAACO,CAAC,CAACQ,MAAF,CAASC,KAAV,CAAP;AACD,GAF+B,EAE7B,EAF6B,CAAhC;AAIA,SACE,MAAC,IAAD;AACE,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KADT;AAEE,IAAA,OAAO,EAAC,qBAFV;AAGE,IAAA,QAAQ,EAAEX,YAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,MAAC,KAAD,CAAO,QAAP;AACE,IAAA,SAAS,EAAE,GADb;AAEE,IAAA,WAAW,EAAC,mDAFd;AAGE,IAAA,KAAK,EAAEP,IAHT;AAIE,IAAA,QAAQ,EAAEe,YAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,MAA3B;AAA4B,IAAA,MAAM,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAFF,EAGE,MAAC,MAAD;AACE,IAAA,IAAI,EAAC,SADP;AAEE,IAAA,KAAK,EAAE;AAAE,eAAO;AAAT,KAFT;AAGE,IAAA,QAAQ,EAAC,QAHX;AAIE,IAAA,OAAO,EAAEV,YAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,CAXF,EAuBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,UAAU,CAACe,GAAX,CAAe,UAAAC,CAAC;AAAA,WACf;AAAK,MAAA,GAAG,EAAEA,CAAV;AAAa,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,GAAG,kCAA2BD,CAA3B,CADL;AAEE,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAE;AAAT,OAFT;AAGE,MAAA,GAAG,EAAEF,CAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CANF,CADe;AAAA,GAAhB,CADH,CAvBF,CADF;AAwCD,CAzED;;AA2EA,eAAetB,QAAf","sourcesContent":["import React, { useCallback, useState, useEffect } from \"react\";\nimport { Form, Input, Button } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ADD_POST_REQUEST } from \"../reducers/post\";\n\nconst PostForm = () => {\n  const dispatch = useDispatch();\n  const [text, setText] = useState(\"\");\n  const { imagePaths, isAddingPost, postAdded } = useSelector(\n    state => state.post\n  );\n\n  useEffect(() => {\n    if (postAdded) {\n      setText(\"\");\n    }\n  }, [postAdded]);\n\n  const onSubmitForm = useCallback(\n    e => {\n      e.preventDefault();\n      if (!text || !text.trim()) {\n        return alert(\"게시글을 작성하세요.\");\n      }\n      dispatch({\n        type: ADD_POST_REQUEST,\n        data: {\n          content: text.trim()\n        }\n      });\n    },\n    [text]\n  );\n\n  const onChangeText = useCallback(e => {\n    setText(e.target.value);\n  }, []);\n\n  return (\n    <Form\n      style={{ margin: \"10px 0 20px\" }}\n      encType=\"multipart/form-data\"\n      onSubmit={onSubmitForm}\n    >\n      <Input.TextArea\n        maxLength={140}\n        placeholder=\"내용을 입력하세요\"\n        value={text}\n        onChange={onChangeText}\n      />\n      <div>\n        <input type=\"file\" multiple hidden />\n        <Button>이미지 업로드</Button>\n        <Button\n          type=\"primary\"\n          style={{ float: \"right\" }}\n          htmlType=\"submit\"\n          loading={isAddingPost}\n        >\n          등록\n        </Button>\n      </div>\n      <div>\n        {imagePaths.map(v => (\n          <div key={v} style={{ display: \"inline-block\" }}>\n            <img\n              src={`http://localhost:3065/${v}`}\n              style={{ width: \"200px\" }}\n              alt={v}\n            />\n            <div>\n              <Button>제거</Button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </Form>\n  );\n};\n\nexport default PostForm;\n"]},"metadata":{},"sourceType":"module"}