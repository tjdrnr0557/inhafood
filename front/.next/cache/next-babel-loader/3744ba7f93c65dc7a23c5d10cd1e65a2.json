{"ast":null,"code":"import { all, fork, takeLatest, put, throttle, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_COMMENTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(postData) {\n  return axios.post(\"/post\", postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      // post reducer의 데이터를 수정\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      // user reducer의 데이터를 수정\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI(lastId = 0, limit = 10) {\n  return axios.get(`/posts?lastId=${lastId}&limit=${limit}`);\n}\n\nfunction* loadMainPosts(action) {\n  try {\n    const result = yield call(loadMainPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield throttle(2000, LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag, lastId) {\n  return axios.get(`/hashtag/${encodeURIComponent(tag)}?lastId=${lastId}&limit=10`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id || 0}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post(\"/post/images\", formData, {\n    withCredentials: true\n  });\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(`/post/${postId}/like`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(`/post/${postId}/like`, {\n    withCredentials: true\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction retweetAPI(postId) {\n  return axios.post(`/post/${postId}/retweet`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: e\n    });\n    alert(e.response && e.response.data);\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction removePostAPI(postId) {\n  return axios.delete(`/post/${postId}`, {\n    withCredentials: true\n  });\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction loadPostAPI(postId) {\n  return axios.get(`/post/${postId}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchRemovePost), fork(watchLoadPost)]);\n}","map":{"version":3,"sources":["/Users/sunggooklee/Desktop/react-nodebird/inhafood/front/sagas/post.js"],"names":["all","fork","takeLatest","put","throttle","call","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_COMMENTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","id","e","error","watchAddPost","loadMainPostsAPI","lastId","limit","get","loadMainPosts","watchLoadMainPosts","loadHashtagPostsAPI","tag","encodeURIComponent","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","loadUserPosts","watchLoadUserPosts","addCommentAPI","postId","content","addComment","comment","console","watchAddComment","loadCommentsAPI","loadComments","comments","watchLoadComments","uploadImagesAPI","formData","uploadImages","watchUploadImages","likePostAPI","likePost","userId","watchLikePost","unlikePostAPI","delete","unlikePost","watchUnlikePost","retweetAPI","retweet","alert","response","watchRetweet","removePostAPI","removePost","watchRemovePost","loadPostAPI","loadPost","watchLoadPost","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, throttle, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  LIKE_POST_FAILURE,\n  LIKE_POST_REQUEST,\n  LIKE_POST_SUCCESS,\n  LOAD_COMMENTS_FAILURE,\n  LOAD_COMMENTS_REQUEST,\n  LOAD_COMMENTS_SUCCESS,\n  LOAD_HASHTAG_POSTS_FAILURE,\n  LOAD_HASHTAG_POSTS_REQUEST,\n  LOAD_HASHTAG_POSTS_SUCCESS,\n  LOAD_MAIN_POSTS_FAILURE,\n  LOAD_MAIN_POSTS_REQUEST,\n  LOAD_MAIN_POSTS_SUCCESS,\n  LOAD_USER_POSTS_FAILURE,\n  LOAD_USER_POSTS_REQUEST,\n  LOAD_USER_POSTS_SUCCESS,\n  REMOVE_POST_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  RETWEET_FAILURE,\n  RETWEET_REQUEST,\n  RETWEET_SUCCESS,\n  UNLIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST,\n  UNLIKE_POST_SUCCESS,\n  UPLOAD_IMAGES_FAILURE,\n  UPLOAD_IMAGES_REQUEST,\n  UPLOAD_IMAGES_SUCCESS,\n  LOAD_POST_SUCCESS,\n  LOAD_POST_FAILURE,\n  LOAD_POST_REQUEST\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(postData) {\n  return axios.post(\"/post\", postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      // post reducer의 데이터를 수정\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      // user reducer의 데이터를 수정\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI(lastId = 0, limit = 10) {\n  return axios.get(`/posts?lastId=${lastId}&limit=${limit}`);\n}\n\nfunction* loadMainPosts(action) {\n  try {\n    const result = yield call(loadMainPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield throttle(2000, LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag, lastId) {\n  return axios.get(\n    `/hashtag/${encodeURIComponent(tag)}?lastId=${lastId}&limit=10`\n  );\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id || 0}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\n    `/post/${data.postId}/comment`,\n    { content: data.content },\n    {\n      withCredentials: true\n    }\n  );\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post(\"/post/images\", formData, {\n    withCredentials: true\n  });\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(\n    `/post/${postId}/like`,\n    {},\n    {\n      withCredentials: true\n    }\n  );\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(`/post/${postId}/like`, {\n    withCredentials: true\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction retweetAPI(postId) {\n  return axios.post(\n    `/post/${postId}/retweet`,\n    {},\n    {\n      withCredentials: true\n    }\n  );\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: e\n    });\n    alert(e.response && e.response.data);\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction removePostAPI(postId) {\n  return axios.delete(`/post/${postId}`, {\n    withCredentials: true\n  });\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction loadPostAPI(postId) {\n  return axios.get(`/post/${postId}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchLoadMainPosts),\n    fork(watchAddPost),\n    fork(watchAddComment),\n    fork(watchLoadComments),\n    fork(watchLoadHashtagPosts),\n    fork(watchLoadUserPosts),\n    fork(watchUploadImages),\n    fork(watchLikePost),\n    fork(watchUnlikePost),\n    fork(watchRetweet),\n    fork(watchRemovePost),\n    fork(watchLoadPost)\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}