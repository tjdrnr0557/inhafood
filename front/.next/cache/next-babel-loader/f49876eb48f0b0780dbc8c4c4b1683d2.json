{"ast":null,"code":"import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOAD_USER_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from \"../reducers/user\";\n\nfunction logInAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/user/login\", loginData, {\n    withCredentials: true\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    alert(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/user/\", signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    // yield call(signUpAPI);\n    yield call(signUpAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/user/logout\", {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut() {\n  try {\n    // yield call(logOutAPI);\n    yield call(logOutAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.get(\"/user/\", {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser() {\n  try {\n    // yield call(loadUserAPI);\n    const result = yield call(loadUserAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/sunggooklee/Desktop/react-nodebird/front/sagas/user.js"],"names":["all","call","fork","put","takeEvery","axios","LOAD_USER_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","logInAPI","loginData","post","withCredentials","logIn","action","result","data","type","e","console","error","alert","watchLogIn","signUpAPI","signUpData","signUp","watchSignUp","logOutAPI","logOut","watchLogOut","loadUserAPI","get","loadUser","watchLoadUser","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,SAA/B,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,iBADF,EAEEC,iBAFF,EAGEC,iBAHF,EAIEC,cAJF,EAKEC,cALF,EAMEC,cANF,EAOEC,eAPF,EAQEC,eARF,EASEC,eATF,EAUEC,eAVF,EAWEC,eAXF,EAYEC,eAZF,QAaO,kBAbP;;AAeA,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAC3B;AACA,SAAOd,KAAK,CAACe,IAAN,CAAW,aAAX,EAA0BD,SAA1B,EAAqC;AAC1CE,IAAAA,eAAe,EAAE;AADyB,GAArC,CAAP;AAGD;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMvB,IAAI,CAACiB,QAAD,EAAWK,MAAM,CAACE,IAAlB,CAAzB;AACA,UAAMtB,GAAG,CAAC;AACR;AACAuB,MAAAA,IAAI,EAAEf,cAFE;AAGRc,MAAAA,IAAI,EAAED,MAAM,CAACC;AAHL,KAAD,CAAT;AAKD,GAPD,CAOE,OAAOE,CAAP,EAAU;AACV;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACAG,IAAAA,KAAK,CAACH,CAAD,CAAL;AACA,UAAMxB,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEjB;AADE,KAAD,CAAT;AAGD;AACF;;AAED,UAAUsB,UAAV,GAAuB;AACrB,QAAM3B,SAAS,CAACM,cAAD,EAAiBY,KAAjB,CAAf;AACD;;AAED,SAASU,SAAT,CAAmBC,UAAnB,EAA+B;AAC7B;AACA,SAAO5B,KAAK,CAACe,IAAN,CAAW,QAAX,EAAqBa,UAArB,CAAP;AACD;;AAED,UAAUC,MAAV,CAAiBX,MAAjB,EAAyB;AACvB,MAAI;AACF;AACA,UAAMtB,IAAI,CAAC+B,SAAD,EAAYT,MAAM,CAACE,IAAnB,CAAV;AACA,UAAMtB,GAAG,CAAC;AACR;AACAuB,MAAAA,IAAI,EAAET;AAFE,KAAD,CAAT;AAID,GAPD,CAOE,OAAOU,CAAP,EAAU;AACV;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMxB,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEX,eADE;AAERc,MAAAA,KAAK,EAAEF;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUQ,WAAV,GAAwB;AACtB,QAAM/B,SAAS,CAACY,eAAD,EAAkBkB,MAAlB,CAAf;AACD;;AAED,SAASE,SAAT,GAAqB;AACnB;AACA,SAAO/B,KAAK,CAACe,IAAN,CACL,cADK,EAEL,EAFK,EAGL;AACEC,IAAAA,eAAe,EAAE;AADnB,GAHK,CAAP;AAOD;;AAED,UAAUgB,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMpC,IAAI,CAACmC,SAAD,CAAV;AACA,UAAMjC,GAAG,CAAC;AACR;AACAuB,MAAAA,IAAI,EAAEZ;AAFE,KAAD,CAAT;AAID,GAPD,CAOE,OAAOa,CAAP,EAAU;AACV;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMxB,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEd,eADE;AAERiB,MAAAA,KAAK,EAAEF;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUW,WAAV,GAAwB;AACtB,QAAMlC,SAAS,CAACS,eAAD,EAAkBwB,MAAlB,CAAf;AACD;;AAED,SAASE,WAAT,GAAuB;AACrB;AACA,SAAOlC,KAAK,CAACmC,GAAN,CAAU,QAAV,EAAoB;AACzBnB,IAAAA,eAAe,EAAE;AADQ,GAApB,CAAP;AAGD;;AAED,UAAUoB,QAAV,GAAqB;AACnB,MAAI;AACF;AACA,UAAMjB,MAAM,GAAG,MAAMvB,IAAI,CAACsC,WAAD,CAAzB;AACA,UAAMpC,GAAG,CAAC;AACR;AACAuB,MAAAA,IAAI,EAAElB,iBAFE;AAGRiB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAHL,KAAD,CAAT;AAKD,GARD,CAQE,OAAOE,CAAP,EAAU;AACV;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMxB,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEpB,iBADE;AAERuB,MAAAA,KAAK,EAAEF;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUe,aAAV,GAA0B;AACxB,QAAMtC,SAAS,CAACG,iBAAD,EAAoBkC,QAApB,CAAf;AACD;;AAED,eAAe,UAAUE,QAAV,GAAqB;AAClC,QAAM3C,GAAG,CAAC,CACRE,IAAI,CAAC6B,UAAD,CADI,EAER7B,IAAI,CAACoC,WAAD,CAFI,EAGRpC,IAAI,CAACwC,aAAD,CAHI,EAIRxC,IAAI,CAACiC,WAAD,CAJI,CAAD,CAAT;AAMD","sourcesContent":["import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  LOAD_USER_FAILURE,\n  LOAD_USER_REQUEST,\n  LOAD_USER_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_OUT_FAILURE,\n  LOG_OUT_REQUEST,\n  LOG_OUT_SUCCESS,\n  SIGN_UP_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS\n} from \"../reducers/user\";\n\nfunction logInAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/user/login\", loginData, {\n    withCredentials: true\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    alert(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/user/\", signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    // yield call(signUpAPI);\n    yield call(signUpAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\n    \"/user/logout\",\n    {},\n    {\n      withCredentials: true\n    }\n  );\n}\n\nfunction* logOut() {\n  try {\n    // yield call(logOutAPI);\n    yield call(logOutAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.get(\"/user/\", {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser() {\n  try {\n    // yield call(loadUserAPI);\n    const result = yield call(loadUserAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogIn),\n    fork(watchLogOut),\n    fork(watchLoadUser),\n    fork(watchSignUp)\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}